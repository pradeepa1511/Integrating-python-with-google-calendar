pip install google-api-python-client                   #this library will help us to interact withany kind of google api


from apiclient.discovery import build                               #it builds service objects for any kind of google api          
from google_auth_oauthlib.flow import InstalledAppFlow              #set up oauth2.0 credentials
import pickle
from datetime import datetime, timedelta

scopes = ['https://www.googleapis.com/auth/calendar']               
flow = InstalledAppFlow.from_client_secrets_file("credentials.json", scopes=scopes)    
'''this will generate a token for that particular user who has gave permssions'''
'''asks me open this link and sign in to my account and enable the permission to see edit and share calendars.'''


credentials = flow.run_console()                       
                                                    

pickle.dump(credentials, open("token.pkl","wb"))          #wb-write binary mode
credentials = pickle.load(open("token.pkl","rb"))         #dump-dumps the credentials into token.pkl



service = build("calendar","v3",credentials=credentials)
result = service.events().list(calendarId="<Your calendar id here>").execute()   # Your calendar id is most probably your email id
calendar_id=result['items'][0]['id']

result = service.events().list(calendarId=calendar_id, timeZone='Asia/Kolkata').execute()  #get the event through events list api

start_time = datetime(2020, 11, 15, 11,15,00)
end_time = start_time + timedelta(hours=24)
timezone = 'Asia/Kolkata'
event = {
  'summary': 'College reopens',
  'location': 'Coimbatore',
  'description': 'College is reopening!!!!!!',
  'start': {
    'dateTime': start_time.strftime("%Y-%m-%dT%H:%M:%S"),
    'timeZone': timezone,
  },
  'end': {
    'dateTime': end_time.strftime("%Y-%m-%dT%H:%M:%S"),
    'timeZone': timezone,
  },
  'recurrence': [
    'RRULE:FREQ=YEARLY;COUNT=1'
  ],
  'attendees': [
    {'email': '<my email_id>'},
  ],
  'reminders': {
    'useDefault': False,
    'overrides': [
      {'method': 'email', 'minutes': 24 * 60},
      {'method': 'popup', 'minutes': 10},
    ],
  },
}

service.events().insert(calendarId=calendar_id, body = event).execute()
